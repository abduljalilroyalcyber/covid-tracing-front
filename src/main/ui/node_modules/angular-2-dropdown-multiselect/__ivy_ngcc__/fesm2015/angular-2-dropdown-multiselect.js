import { Pipe, Directive, ElementRef, Host, Input, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, IterableDiffers, Output, HostListener, NgModule } from '@angular/core';
import { FormBuilder, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/common';

function MultiselectDropdownComponent_div_4_div_2_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵelementStart(1, "button", 19);
    ɵngcc0.ɵɵlistener("click", function MultiselectDropdownComponent_div_4_div_2_div_5_Template_button_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(3); return ctx_r10.clearSearch($event); });
    ɵngcc0.ɵɵelement(2, "i", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function MultiselectDropdownComponent_div_4_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "div", 13);
    ɵngcc0.ɵɵelementStart(2, "span", 14);
    ɵngcc0.ɵɵelement(3, "i", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "input", 16);
    ɵngcc0.ɵɵtemplate(5, MultiselectDropdownComponent_div_4_div_2_div_5_Template, 3, 0, "div", 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("formControl", ctx_r2.filterControl)("placeholder", ctx_r2.texts.searchPlaceholder);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.filterControl.value.length > 0);
} }
const _c0 = function (a0, a1) { return { "glyphicon glyphicon-ok": a0, "fa fa-check": a1 }; };
function MultiselectDropdownComponent_div_4_a_3_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 21);
    ɵngcc0.ɵɵlistener("click", function MultiselectDropdownComponent_div_4_a_3_Template_a_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.checkAll(); });
    ɵngcc0.ɵɵelementStart(1, "span", 22);
    ɵngcc0.ɵɵelement(2, "span", 23);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(2, _c0, ctx_r3.settings.checkedStyle !== "fontawesome", ctx_r3.settings.checkedStyle === "fontawesome"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.texts.checkAll, " ");
} }
const _c1 = function (a0, a1) { return { "glyphicon glyphicon-remove": a0, "fa fa-times": a1 }; };
function MultiselectDropdownComponent_div_4_a_4_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 24);
    ɵngcc0.ɵɵlistener("click", function MultiselectDropdownComponent_div_4_a_4_Template_a_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.uncheckAll(); });
    ɵngcc0.ɵɵelementStart(1, "span", 22);
    ɵngcc0.ɵɵelement(2, "span", 23);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(2, _c1, ctx_r4.settings.checkedStyle !== "fontawesome", ctx_r4.settings.checkedStyle === "fontawesome"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.texts.uncheckAll, " ");
} }
function MultiselectDropdownComponent_div_4_a_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "a", 25);
} }
function MultiselectDropdownComponent_div_4_a_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r6.texts.searchNoRenderText);
} }
function MultiselectDropdownComponent_div_4_a_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r7.texts.searchEmptyResult);
} }
function MultiselectDropdownComponent_div_4_a_8_span_1_input_2_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 36);
    ɵngcc0.ɵɵlistener("click", function MultiselectDropdownComponent_div_4_a_8_span_1_input_2_Template_input_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const option_r16 = ɵngcc0.ɵɵnextContext(2).$implicit; const ctx_r24 = ɵngcc0.ɵɵnextContext(2); return ctx_r24.preventCheckboxCheck($event, option_r16); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r16 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r20 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("checked", ctx_r20.isSelected(option_r16))("disabled", ctx_r20.isCheckboxDisabled(option_r16))("ngStyle", ctx_r20.getItemStyleSelectionDisabled());
} }
function MultiselectDropdownComponent_div_4_a_8_span_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 37);
} if (rf & 2) {
    const option_r16 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r21 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("glyphicon-ok", ctx_r21.isSelected(option_r16))("glyphicon-lock", ctx_r21.isCheckboxDisabled(option_r16));
} }
function MultiselectDropdownComponent_div_4_a_8_span_1_span_4_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelement(1, "i", 40);
    ɵngcc0.ɵɵelementEnd();
} }
function MultiselectDropdownComponent_div_4_a_8_span_1_span_4_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelement(1, "i", 41);
    ɵngcc0.ɵɵelementEnd();
} }
function MultiselectDropdownComponent_div_4_a_8_span_1_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 38);
    ɵngcc0.ɵɵtemplate(1, MultiselectDropdownComponent_div_4_a_8_span_1_span_4_span_1_Template, 2, 0, "span", 39);
    ɵngcc0.ɵɵtemplate(2, MultiselectDropdownComponent_div_4_a_8_span_1_span_4_span_2_Template, 2, 0, "span", 39);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r16 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r22 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r22.isSelected(option_r16));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r22.isCheckboxDisabled(option_r16));
} }
function MultiselectDropdownComponent_div_4_a_8_span_1_span_5_img_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "img", 46);
} if (rf & 2) {
    const option_r16 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵproperty("src", option_r16.image, ɵngcc0.ɵɵsanitizeUrl);
} }
function MultiselectDropdownComponent_div_4_a_8_span_1_span_5_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 47);
    ɵngcc0.ɵɵelementStart(1, "div", 48);
    ɵngcc0.ɵɵelement(2, "span", 49);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
const _c2 = function (a0) { return { "slideron": a0 }; };
function MultiselectDropdownComponent_div_4_a_8_span_1_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 42);
    ɵngcc0.ɵɵelementStart(1, "div", 43);
    ɵngcc0.ɵɵtemplate(2, MultiselectDropdownComponent_div_4_a_8_span_1_span_5_img_2_Template, 1, 1, "img", 44);
    ɵngcc0.ɵɵtemplate(3, MultiselectDropdownComponent_div_4_a_8_span_1_span_5_div_3_Template, 3, 0, "div", 45);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r16 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r23 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c2, ctx_r23.isSelected(option_r16)));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", option_r16.image != null);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", option_r16.image == null);
} }
const _c3 = function (a0) { return { "chunkyrow": a0 }; };
function MultiselectDropdownComponent_div_4_a_8_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 30);
    ɵngcc0.ɵɵelementContainerStart(1, 31);
    ɵngcc0.ɵɵtemplate(2, MultiselectDropdownComponent_div_4_a_8_span_1_input_2_Template, 1, 3, "input", 32);
    ɵngcc0.ɵɵtemplate(3, MultiselectDropdownComponent_div_4_a_8_span_1_span_3_Template, 1, 4, "span", 33);
    ɵngcc0.ɵɵtemplate(4, MultiselectDropdownComponent_div_4_a_8_span_1_span_4_Template, 3, 2, "span", 34);
    ɵngcc0.ɵɵtemplate(5, MultiselectDropdownComponent_div_4_a_8_span_1_span_5_Template, 4, 5, "span", 35);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementStart(6, "span", 23);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r16 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r17 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵstyleProp("padding-left", ctx_r17.parents.length > 0 && ctx_r17.parents.indexOf(option_r16.id) < 0 && "30px");
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r17.getItemStyleSelectionDisabled());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitch", ctx_r17.settings.checkedStyle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "checkboxes");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "glyphicon");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "fontawesome");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "visual");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("font-weight", ctx_r17.parents.indexOf(option_r16.id) >= 0 ? "bold" : "normal");
    ɵngcc0.ɵɵclassProp("disabled", ctx_r17.isCheckboxDisabled(option_r16));
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(15, _c3, ctx_r17.settings.checkedStyle == "visual"))("ngClass", ctx_r17.settings.itemClasses);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", option_r16.name, " ");
} }
function MultiselectDropdownComponent_div_4_a_8_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r16 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r19 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("disabled", ctx_r19.isCheckboxDisabled(option_r16));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(option_r16.name);
} }
function MultiselectDropdownComponent_div_4_a_8_Template(rf, ctx) { if (rf & 1) {
    const _r39 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 27);
    ɵngcc0.ɵɵlistener("click", function MultiselectDropdownComponent_div_4_a_8_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r39); const option_r16 = ctx.$implicit; const ctx_r38 = ɵngcc0.ɵɵnextContext(2); return ctx_r38.setSelected($event, option_r16); })("keydown.space", function MultiselectDropdownComponent_div_4_a_8_Template_a_keydown_space_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r39); const option_r16 = ctx.$implicit; const ctx_r40 = ɵngcc0.ɵɵnextContext(2); return ctx_r40.setSelected($event, option_r16); })("keydown.enter", function MultiselectDropdownComponent_div_4_a_8_Template_a_keydown_enter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r39); const option_r16 = ctx.$implicit; const ctx_r41 = ɵngcc0.ɵɵnextContext(2); return ctx_r41.setSelected($event, option_r16); });
    ɵngcc0.ɵɵtemplate(1, MultiselectDropdownComponent_div_4_a_8_span_1_Template, 8, 17, "span", 28);
    ɵngcc0.ɵɵtemplate(2, MultiselectDropdownComponent_div_4_a_8_ng_template_2_Template, 2, 3, "ng-template", null, 29, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r16 = ctx.$implicit;
    const _r18 = ɵngcc0.ɵɵreference(3);
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("active", ctx_r8.isSelected(option_r16))("dropdown-header", option_r16.isLabel);
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r8.getItemStyle(option_r16))("ngClass", option_r16.classes)("ssAutofocus", option_r16 !== ctx_r8.focusedItem);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !option_r16.isLabel)("ngIfElse", _r18);
} }
const _c4 = function (a0) { return { "chunkydropdown-menu": a0 }; };
function MultiselectDropdownComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r43 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 4, 5);
    ɵngcc0.ɵɵlistener("scroll", function MultiselectDropdownComponent_div_4_Template_div_scroll_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r43); const ctx_r42 = ɵngcc0.ɵɵnextContext(); return ctx_r42.settings.isLazyLoad ? ctx_r42.checkScrollPosition($event) : null; })("wheel", function MultiselectDropdownComponent_div_4_Template_div_wheel_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r43); const _r1 = ɵngcc0.ɵɵreference(1); const ctx_r44 = ɵngcc0.ɵɵnextContext(); return ctx_r44.settings.stopScrollPropagation ? ctx_r44.checkScrollPropagation($event, _r1) : null; })("keydown.tab", function MultiselectDropdownComponent_div_4_Template_div_keydown_tab_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r43); const ctx_r45 = ɵngcc0.ɵɵnextContext(); return ctx_r45.focusItem(1, $event); })("keydown.shift.tab", function MultiselectDropdownComponent_div_4_Template_div_keydown_shift_tab_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r43); const ctx_r46 = ɵngcc0.ɵɵnextContext(); return ctx_r46.focusItem(0 - 1, $event); });
    ɵngcc0.ɵɵtemplate(2, MultiselectDropdownComponent_div_4_div_2_Template, 6, 3, "div", 6);
    ɵngcc0.ɵɵtemplate(3, MultiselectDropdownComponent_div_4_a_3_Template, 4, 5, "a", 7);
    ɵngcc0.ɵɵtemplate(4, MultiselectDropdownComponent_div_4_a_4_Template, 4, 5, "a", 8);
    ɵngcc0.ɵɵtemplate(5, MultiselectDropdownComponent_div_4_a_5_Template, 1, 0, "a", 9);
    ɵngcc0.ɵɵtemplate(6, MultiselectDropdownComponent_div_4_a_6_Template, 2, 1, "a", 10);
    ɵngcc0.ɵɵtemplate(7, MultiselectDropdownComponent_div_4_a_7_Template, 2, 1, "a", 10);
    ɵngcc0.ɵɵtemplate(8, MultiselectDropdownComponent_div_4_a_8_Template, 4, 9, "a", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("max-height", ctx_r0.settings.maxHeight);
    ɵngcc0.ɵɵclassProp("pull-right", ctx_r0.settings.pullRight)("dropdown-menu-right", ctx_r0.settings.pullRight);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(15, _c4, ctx_r0.settings.checkedStyle == "visual"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.settings.enableSearch);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.settings.showCheckAll && !ctx_r0.disabledSelection);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.settings.showUncheckAll && !ctx_r0.disabledSelection);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.settings.showCheckAll || ctx_r0.settings.showUncheckAll);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.renderItems);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.renderItems && !ctx_r0.renderFilteredOptions.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.renderFilteredOptions)("ngForTrackBy", ctx_r0.trackById);
} }
class MultiSelectSearchFilter {
    constructor() {
        this._searchCache = {};
        this._searchCacheInclusive = {};
        this._prevSkippedItems = {};
    }
    /**
     * @param {?} options
     * @param {?=} str
     * @param {?=} limit
     * @param {?=} renderLimit
     * @param {?=} searchFunction
     * @return {?}
     */
    transform(options, str = '', limit = 0, renderLimit = 0, searchFunction) {
        str = str.toLowerCase();
        // Drop cache because options were updated
        if (options !== this._lastOptions) {
            this._lastOptions = options;
            this._searchCache = {};
            this._searchCacheInclusive = {};
            this._prevSkippedItems = {};
        }
        const /** @type {?} */ filteredOpts = this._searchCache.hasOwnProperty(str)
            ? this._searchCache[str]
            : this._doSearch(options, str, limit, searchFunction);
        const /** @type {?} */ isUnderLimit = options.length <= limit;
        return isUnderLimit
            ? filteredOpts
            : this._limitRenderedItems(filteredOpts, renderLimit);
    }
    /**
     * @param {?} options
     * @param {?} prevOptions
     * @param {?} prevSearchStr
     * @return {?}
     */
    _getSubsetOptions(options, prevOptions, prevSearchStr) {
        const /** @type {?} */ prevInclusiveOrIdx = this._searchCacheInclusive[prevSearchStr];
        if (prevInclusiveOrIdx === true) {
            // If have previous results and it was inclusive, do only subsearch
            return prevOptions;
        }
        else if (typeof prevInclusiveOrIdx === 'number') {
            // Or reuse prev results with unchecked ones
            return [...prevOptions, ...options.slice(prevInclusiveOrIdx)];
        }
        return options;
    }
    /**
     * @param {?} options
     * @param {?} str
     * @param {?} limit
     * @param {?} searchFunction
     * @return {?}
     */
    _doSearch(options, str, limit, searchFunction) {
        const /** @type {?} */ prevStr = str.slice(0, -1);
        const /** @type {?} */ prevResults = this._searchCache[prevStr];
        const /** @type {?} */ prevResultShift = this._prevSkippedItems[prevStr] || 0;
        if (prevResults) {
            options = this._getSubsetOptions(options, prevResults, prevStr);
        }
        const /** @type {?} */ optsLength = options.length;
        const /** @type {?} */ maxFound = limit > 0 ? Math.min(limit, optsLength) : optsLength;
        const /** @type {?} */ regexp = searchFunction(str);
        const /** @type {?} */ filteredOpts = [];
        let /** @type {?} */ i = 0, /** @type {?} */ founded = 0, /** @type {?} */ removedFromPrevResult = 0;
        const /** @type {?} */ doesOptionMatch = (option) => regexp.test(option.name);
        const /** @type {?} */ getChildren = (option) => options.filter(child => child.parentId === option.id);
        const /** @type {?} */ getParent = (option) => options.find(parent => option.parentId === parent.id);
        const /** @type {?} */ foundFn = (item) => { filteredOpts.push(item); founded++; };
        const /** @type {?} */ notFoundFn = prevResults ? () => removedFromPrevResult++ : () => { };
        for (; i < optsLength && founded < maxFound; ++i) {
            const /** @type {?} */ option = options[i];
            const /** @type {?} */ directMatch = doesOptionMatch(option);
            if (directMatch) {
                foundFn(option);
                continue;
            }
            if (typeof option.parentId === 'undefined') {
                const /** @type {?} */ childrenMatch = getChildren(option).some(doesOptionMatch);
                if (childrenMatch) {
                    foundFn(option);
                    continue;
                }
            }
            if (typeof option.parentId !== 'undefined') {
                const /** @type {?} */ parentMatch = doesOptionMatch(getParent(option));
                if (parentMatch) {
                    foundFn(option);
                    continue;
                }
            }
            notFoundFn();
        }
        const /** @type {?} */ totalIterations = i + prevResultShift;
        this._searchCache[str] = filteredOpts;
        this._searchCacheInclusive[str] = i === optsLength || totalIterations;
        this._prevSkippedItems[str] = removedFromPrevResult + prevResultShift;
        return filteredOpts;
    }
    /**
     * @template T
     * @param {?} items
     * @param {?} limit
     * @return {?}
     */
    _limitRenderedItems(items, limit) {
        return items.length > limit && limit > 0 ? items.slice(0, limit) : items;
    }
}
MultiSelectSearchFilter.ɵfac = function MultiSelectSearchFilter_Factory(t) { return new (t || MultiSelectSearchFilter)(); };
MultiSelectSearchFilter.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "searchFilter", type: MultiSelectSearchFilter, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MultiSelectSearchFilter, [{
        type: Pipe,
        args: [{
                name: 'searchFilter'
            }]
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AutofocusDirective {
    /**
     * @param {?} elemRef
     */
    constructor(elemRef) {
        this.elemRef = elemRef;
    }
    /**
     * @return {?}
     */
    get element() {
        return this.elemRef.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.focus();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const /** @type {?} */ ssAutofocusChange = changes["ssAutofocus"];
        if (ssAutofocusChange && !ssAutofocusChange.isFirstChange()) {
            this.focus();
        }
    }
    /**
     * @return {?}
     */
    focus() {
        if (this.ssAutofocus) {
            return;
        }
        this.element.focus && this.element.focus();
    }
}
AutofocusDirective.ɵfac = function AutofocusDirective_Factory(t) { return new (t || AutofocusDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef, 1)); };
AutofocusDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AutofocusDirective, selectors: [["", "ssAutofocus", ""]], inputs: { ssAutofocus: "ssAutofocus" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/** @nocollapse */
AutofocusDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Host },] },
];
AutofocusDirective.propDecorators = {
    "ssAutofocus": [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutofocusDirective, [{
        type: Directive,
        args: [{
                selector: '[ssAutofocus]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef, decorators: [{
                type: Host
            }] }]; }, { ssAutofocus: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Angular 2 Dropdown Multiselect for Bootstrap
 *
 * Simon Lindh
 * https://github.com/softsimon/angular-2-dropdown-multiselect
 */
const /** @type {?} */ MULTISELECT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => MultiselectDropdownComponent),
    multi: true,
};
class MultiselectDropdownComponent {
    /**
     * @param {?} element
     * @param {?} fb
     * @param {?} searchFilter
     * @param {?} differs
     * @param {?} cdRef
     */
    constructor(element, fb, searchFilter, differs, cdRef) {
        this.element = element;
        this.fb = fb;
        this.searchFilter = searchFilter;
        this.cdRef = cdRef;
        this.filterControl = this.fb.control('');
        this.disabled = false;
        this.disabledSelection = false;
        this.searchFunction = this._escapeRegExp;
        this.selectionLimitReached = new EventEmitter();
        this.dropdownClosed = new EventEmitter();
        this.dropdownOpened = new EventEmitter();
        this.onAdded = new EventEmitter();
        this.onRemoved = new EventEmitter();
        this.onLazyLoad = new EventEmitter();
        this.onFilter = this.filterControl.valueChanges;
        this.destroyed$ = new Subject();
        this.filteredOptions = [];
        this.lazyLoadOptions = [];
        this.renderFilteredOptions = [];
        this.model = [];
        this.prevModel = [];
        this.numSelected = 0;
        this.renderItems = true;
        this.checkAllSearchRegister = new Set();
        this.checkAllStatus = false;
        this.loadedValueIds = [];
        this._focusBack = false;
        this.defaultSettings = {
            closeOnClickOutside: true,
            pullRight: false,
            enableSearch: false,
            searchRenderLimit: 0,
            searchRenderAfter: 1,
            searchMaxLimit: 0,
            searchMaxRenderedItems: 0,
            checkedStyle: 'checkboxes',
            buttonClasses: 'btn btn-primary dropdown-toggle',
            containerClasses: 'dropdown-inline',
            selectionLimit: 0,
            minSelectionLimit: 0,
            closeOnSelect: false,
            autoUnselect: false,
            showCheckAll: false,
            showUncheckAll: false,
            fixedTitle: false,
            dynamicTitleMaxItems: 3,
            maxHeight: '300px',
            isLazyLoad: false,
            stopScrollPropagation: false,
            loadViewDistance: 1,
            selectAddedValues: false,
            ignoreLabels: false,
            maintainSelectionOrderInTitle: false,
            focusBack: true
        };
        this.defaultTexts = {
            checkAll: 'Check all',
            uncheckAll: 'Uncheck all',
            checked: 'checked',
            checkedPlural: 'checked',
            searchPlaceholder: 'Search...',
            searchEmptyResult: 'Nothing found...',
            searchNoRenderText: 'Type in search box to see results...',
            defaultTitle: 'Select',
            allSelected: 'All selected',
        };
        this._isVisible = false;
        this._workerDocClicked = false;
        this.onModelChange = (_) => { };
        this.onModelTouched = () => { };
        this.differ = differs.find([]).create(null);
        this.settings = this.defaultSettings;
        this.texts = this.defaultTexts;
    }
    /**
     * @return {?}
     */
    get focusBack() {
        return this.settings.focusBack && this._focusBack;
    }
    /**
     * @return {?}
     */
    clickedOutside() {
        if (!this.isVisible || !this.settings.closeOnClickOutside) {
            return;
        }
        this.isVisible = false;
        this._focusBack = true;
        this.dropdownClosed.emit();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set isVisible(val) {
        this._isVisible = val;
        this._workerDocClicked = val ? false : this._workerDocClicked;
    }
    /**
     * @return {?}
     */
    get isVisible() {
        return this._isVisible;
    }
    /**
     * @return {?}
     */
    get searchLimit() {
        return this.settings.searchRenderLimit;
    }
    /**
     * @return {?}
     */
    get searchRenderAfter() {
        return this.settings.searchRenderAfter;
    }
    /**
     * @return {?}
     */
    get searchLimitApplied() {
        return this.searchLimit > 0 && this.options.length > this.searchLimit;
    }
    /**
     * @param {?} option
     * @return {?}
     */
    getItemStyle(option) {
        if (!option.isLabel) ;
        if (option.disabled) ;
    }
    /**
     * @return {?}
     */
    getItemStyleSelectionDisabled() {
        if (this.disabledSelection) {
            return { cursor: 'default' };
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.title = this.texts.defaultTitle || '';
        this.filterControl.valueChanges.pipe(takeUntil(this.destroyed$)).subscribe(() => {
            this.updateRenderItems();
            if (this.settings.isLazyLoad) {
                this.load();
            }
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['options']) {
            this.options = this.options || [];
            this.parents = this.options
                .filter(option => typeof option.parentId === 'number')
                .map(option => option.parentId);
            this.updateRenderItems();
            if (this.settings.isLazyLoad &&
                this.settings.selectAddedValues &&
                this.loadedValueIds.length === 0) {
                this.loadedValueIds = this.loadedValueIds.concat(changes["options"].currentValue.map(value => value.id));
            }
            if (this.settings.isLazyLoad &&
                this.settings.selectAddedValues &&
                changes["options"].previousValue) {
                const /** @type {?} */ addedValues = changes["options"].currentValue.filter(value => this.loadedValueIds.indexOf(value.id) === -1);
                this.loadedValueIds.concat(addedValues.map(value => value.id));
                if (this.checkAllStatus) {
                    this.addChecks(addedValues);
                }
                else if (this.checkAllSearchRegister.size > 0) {
                    this.checkAllSearchRegister.forEach(searchValue => this.addChecks(this.applyFilters(addedValues, searchValue)));
                }
            }
            if (this.texts) {
                this.updateTitle();
            }
            this.fireModelChange();
        }
        if (changes['settings']) {
            this.settings = Object.assign({}, this.defaultSettings, this.settings);
        }
        if (changes['texts']) {
            this.texts = Object.assign({}, this.defaultTexts, this.texts);
            if (!changes['texts'].isFirstChange()) {
                this.updateTitle();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed$.next();
    }
    /**
     * @return {?}
     */
    updateRenderItems() {
        this.renderItems =
            !this.searchLimitApplied ||
                this.filterControl.value.length >= this.searchRenderAfter;
        this.filteredOptions = this.applyFilters(this.options, this.settings.isLazyLoad ? '' : this.filterControl.value);
        this.renderFilteredOptions = this.renderItems ? this.filteredOptions : [];
        this.focusedItem = undefined;
    }
    /**
     * @param {?} options
     * @param {?} value
     * @return {?}
     */
    applyFilters(options, value) {
        return this.searchFilter.transform(options, value, this.settings.searchMaxLimit, this.settings.searchMaxRenderedItems, this.searchFunction);
    }
    /**
     * @return {?}
     */
    fireModelChange() {
        if (this.model != this.prevModel) {
            this.prevModel = this.model;
            this.onModelChange(this.model);
            this.onModelTouched();
            this.cdRef.markForCheck();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== undefined && value !== null) {
            this.model = Array.isArray(value) ? value : [value];
            this.ngDoCheck();
        }
        else {
            this.model = [];
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        const /** @type {?} */ changes = this.differ.diff(this.model);
        if (changes) {
            this.updateNumSelected();
            this.updateTitle();
        }
    }
    /**
     * @param {?} _c
     * @return {?}
     */
    validate(_c) {
        if (this.model && this.model.length) {
            return {
                required: {
                    valid: false
                }
            };
        }
        if (this.options.filter(o => this.model.indexOf(o.id) && !o.disabled).length === 0) {
            return {
                selection: {
                    valid: false
                }
            };
        }
        return null;
    }
    /**
     * @param {?} _fn
     * @return {?}
     */
    registerOnValidatorChange(_fn) {
        throw new Error('Method not implemented.');
    }
    /**
     * @param {?} event
     * @return {?}
     */
    clearSearch(event) {
        this.maybeStopPropagation(event);
        this.filterControl.setValue('');
    }
    /**
     * @param {?=} e
     * @return {?}
     */
    toggleDropdown(e) {
        if (this.isVisible) {
            this._focusBack = true;
        }
        this.isVisible = !this.isVisible;
        this.isVisible ? this.dropdownOpened.emit() : this.dropdownClosed.emit();
        this.focusedItem = undefined;
    }
    /**
     * @param {?=} e
     * @return {?}
     */
    closeDropdown(e) {
        this.isVisible = true;
        this.toggleDropdown(e);
    }
    /**
     * @param {?} option
     * @return {?}
     */
    isSelected(option) {
        return this.model && this.model.indexOf(option.id) > -1;
    }
    /**
     * @param {?} _event
     * @param {?} option
     * @return {?}
     */
    setSelected(_event, option) {
        if (option.isLabel) {
            return;
        }
        if (option.disabled) {
            return;
        }
        if (this.disabledSelection) {
            return;
        }
        setTimeout(() => {
            this.maybeStopPropagation(_event);
            this.maybePreventDefault(_event);
            const /** @type {?} */ index = this.model.indexOf(option.id);
            const /** @type {?} */ isAtSelectionLimit = this.settings.selectionLimit > 0 &&
                this.model.length >= this.settings.selectionLimit;
            const /** @type {?} */ removeItem = (idx, id) => {
                this.model.splice(idx, 1);
                this.onRemoved.emit(id);
                if (this.settings.isLazyLoad &&
                    this.lazyLoadOptions.some(val => val.id === id)) {
                    this.lazyLoadOptions.splice(this.lazyLoadOptions.indexOf(this.lazyLoadOptions.find(val => val.id === id)), 1);
                }
            };
            if (index > -1) {
                if (this.settings.minSelectionLimit === undefined ||
                    this.numSelected > this.settings.minSelectionLimit) {
                    removeItem(index, option.id);
                }
                const /** @type {?} */ parentIndex = option.parentId && this.model.indexOf(option.parentId);
                if (parentIndex > -1) {
                    removeItem(parentIndex, option.parentId);
                }
                else if (this.parents.indexOf(option.id) > -1) {
                    this.options
                        .filter(child => this.model.indexOf(child.id) > -1 &&
                        child.parentId === option.id)
                        .forEach(child => removeItem(this.model.indexOf(child.id), child.id));
                }
            }
            else if (isAtSelectionLimit && !this.settings.autoUnselect) {
                this.selectionLimitReached.emit(this.model.length);
                return;
            }
            else {
                const /** @type {?} */ addItem = (id) => {
                    this.model.push(id);
                    this.onAdded.emit(id);
                    if (this.settings.isLazyLoad &&
                        !this.lazyLoadOptions.some(val => val.id === id)) {
                        this.lazyLoadOptions.push(option);
                    }
                };
                addItem(option.id);
                if (!isAtSelectionLimit) {
                    if (option.parentId && !this.settings.ignoreLabels) {
                        const /** @type {?} */ children = this.options.filter(child => child.id !== option.id && child.parentId === option.parentId);
                        if (children.every(child => this.model.indexOf(child.id) > -1)) {
                            addItem(option.parentId);
                        }
                    }
                    else if (this.parents.indexOf(option.id) > -1) {
                        const /** @type {?} */ children = this.options.filter(child => this.model.indexOf(child.id) < 0 && child.parentId === option.id);
                        children.forEach(child => addItem(child.id));
                    }
                }
                else {
                    removeItem(0, this.model[0]);
                }
            }
            if (this.settings.closeOnSelect) {
                this.toggleDropdown();
            }
            this.model = this.model.slice();
            this.fireModelChange();
        }, 0);
    }
    /**
     * @return {?}
     */
    updateNumSelected() {
        this.numSelected =
            this.model.filter(id => this.parents.indexOf(id) < 0).length || 0;
    }
    /**
     * @return {?}
     */
    updateTitle() {
        let /** @type {?} */ numSelectedOptions = this.options.length;
        if (this.settings.ignoreLabels) {
            numSelectedOptions = this.options.filter((option) => !option.isLabel).length;
        }
        if (this.numSelected === 0 || this.settings.fixedTitle) {
            this.title = this.texts ? this.texts.defaultTitle : '';
        }
        else if (this.settings.displayAllSelectedText &&
            this.model.length === numSelectedOptions) {
            this.title = this.texts ? this.texts.allSelected : '';
        }
        else if (this.settings.dynamicTitleMaxItems &&
            this.settings.dynamicTitleMaxItems >= this.numSelected) {
            const /** @type {?} */ useOptions = this.settings.isLazyLoad && this.lazyLoadOptions.length
                ? this.lazyLoadOptions
                : this.options;
            let /** @type {?} */ titleSelections;
            if (this.settings.maintainSelectionOrderInTitle) {
                const /** @type {?} */ optionIds = useOptions.map((selectOption, idx) => selectOption.id);
                titleSelections = this.model
                    .map((selectedId) => optionIds.indexOf(selectedId))
                    .filter((optionIndex) => optionIndex > -1)
                    .map((optionIndex) => useOptions[optionIndex]);
            }
            else {
                titleSelections = useOptions.filter((option) => this.model.indexOf(option.id) > -1);
            }
            this.title = titleSelections.map((option) => option.name).join(', ');
        }
        else {
            this.title =
                this.numSelected +
                    ' ' +
                    (this.numSelected === 1
                        ? this.texts.checked
                        : this.texts.checkedPlural);
        }
        this.cdRef.markForCheck();
    }
    /**
     * @return {?}
     */
    searchFilterApplied() {
        return (this.settings.enableSearch &&
            this.filterControl.value &&
            this.filterControl.value.length > 0);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    addChecks(options) {
        const /** @type {?} */ checkedOptions = options
            .filter((option) => {
            if (!option.disabled &&
                (this.model.indexOf(option.id) === -1 &&
                    !(this.settings.ignoreLabels && option.isLabel))) {
                this.onAdded.emit(option.id);
                return true;
            }
            return false;
        })
            .map((option) => option.id);
        this.model = this.model.concat(checkedOptions);
    }
    /**
     * @return {?}
     */
    checkAll() {
        if (!this.disabledSelection) {
            this.addChecks(!this.searchFilterApplied() ? this.options : this.filteredOptions);
            if (this.settings.isLazyLoad && this.settings.selectAddedValues) {
                if (this.searchFilterApplied() && !this.checkAllStatus) {
                    this.checkAllSearchRegister.add(this.filterControl.value);
                }
                else {
                    this.checkAllSearchRegister.clear();
                    this.checkAllStatus = true;
                }
                this.load();
            }
            this.fireModelChange();
        }
    }
    /**
     * @return {?}
     */
    uncheckAll() {
        if (!this.disabledSelection) {
            const /** @type {?} */ checkedOptions = this.model;
            let /** @type {?} */ unCheckedOptions = !this.searchFilterApplied()
                ? this.model
                : this.filteredOptions.map((option) => option.id);
            // set unchecked options only to the ones that were checked
            unCheckedOptions = checkedOptions.filter(item => unCheckedOptions.indexOf(item) > -1);
            this.model = this.model.filter((id) => {
                if ((unCheckedOptions.indexOf(id) < 0 &&
                    this.settings.minSelectionLimit === undefined) ||
                    unCheckedOptions.indexOf(id) < this.settings.minSelectionLimit) {
                    return true;
                }
                else {
                    this.onRemoved.emit(id);
                    return false;
                }
            });
            if (this.settings.isLazyLoad && this.settings.selectAddedValues) {
                if (this.searchFilterApplied()) {
                    if (this.checkAllSearchRegister.has(this.filterControl.value)) {
                        this.checkAllSearchRegister.delete(this.filterControl.value);
                        this.checkAllSearchRegister.forEach(function (searchTerm) {
                            const /** @type {?} */ filterOptions = this.applyFilters(this.options.filter(option => unCheckedOptions.indexOf(option.id) > -1), searchTerm);
                            this.addChecks(filterOptions);
                        });
                    }
                }
                else {
                    this.checkAllSearchRegister.clear();
                    this.checkAllStatus = false;
                }
                this.load();
            }
            this.fireModelChange();
        }
    }
    /**
     * @param {?} event
     * @param {?} option
     * @return {?}
     */
    preventCheckboxCheck(event, option) {
        if (option.disabled ||
            (this.settings.selectionLimit &&
                !this.settings.autoUnselect &&
                this.model.length >= this.settings.selectionLimit &&
                this.model.indexOf(option.id) === -1 &&
                this.maybePreventDefault(event))) {
            this.maybePreventDefault(event);
        }
    }
    /**
     * @param {?=} option
     * @return {?}
     */
    isCheckboxDisabled(option) {
        return this.disabledSelection || option && option.disabled;
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    checkScrollPosition(ev) {
        const /** @type {?} */ scrollTop = ev.target.scrollTop;
        const /** @type {?} */ scrollHeight = ev.target.scrollHeight;
        const /** @type {?} */ scrollElementHeight = ev.target.clientHeight;
        const /** @type {?} */ roundingPixel = 1;
        const /** @type {?} */ gutterPixel = 1;
        if (scrollTop >=
            scrollHeight -
                (1 + this.settings.loadViewDistance) * scrollElementHeight -
                roundingPixel -
                gutterPixel) {
            this.load();
        }
    }
    /**
     * @param {?} ev
     * @param {?} element
     * @return {?}
     */
    checkScrollPropagation(ev, element) {
        const /** @type {?} */ scrollTop = element.scrollTop;
        const /** @type {?} */ scrollHeight = element.scrollHeight;
        const /** @type {?} */ scrollElementHeight = element.clientHeight;
        if ((ev.deltaY > 0 && scrollTop + scrollElementHeight >= scrollHeight) ||
            (ev.deltaY < 0 && scrollTop <= 0)) {
            ev = ev || window.event;
            this.maybePreventDefault(ev);
            ev.returnValue = false;
        }
    }
    /**
     * @param {?} idx
     * @param {?} selectOption
     * @return {?}
     */
    trackById(idx, selectOption) {
        return selectOption.id;
    }
    /**
     * @return {?}
     */
    load() {
        this.onLazyLoad.emit({
            length: this.options.length,
            filter: this.filterControl.value,
            checkAllSearches: this.checkAllSearchRegister,
            checkAllStatus: this.checkAllStatus,
        });
    }
    /**
     * @param {?} dir
     * @param {?=} e
     * @return {?}
     */
    focusItem(dir, e) {
        if (!this.isVisible) {
            return;
        }
        this.maybePreventDefault(e);
        const /** @type {?} */ idx = this.filteredOptions.indexOf(this.focusedItem);
        if (idx === -1) {
            this.focusedItem = this.filteredOptions[0];
            return;
        }
        const /** @type {?} */ nextIdx = idx + dir;
        const /** @type {?} */ newIdx = nextIdx < 0
            ? this.filteredOptions.length - 1
            : nextIdx % this.filteredOptions.length;
        this.focusedItem = this.filteredOptions[newIdx];
    }
    /**
     * @param {?=} e
     * @return {?}
     */
    maybePreventDefault(e) {
        if (e && e.preventDefault) {
            e.preventDefault();
        }
    }
    /**
     * @param {?=} e
     * @return {?}
     */
    maybeStopPropagation(e) {
        if (e && e.stopPropagation) {
            e.stopPropagation();
        }
    }
    /**
     * @param {?} str
     * @return {?}
     */
    _escapeRegExp(str) {
        const /** @type {?} */ regExpStr = str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
        return new RegExp(regExpStr, 'i');
    }
}
MultiselectDropdownComponent.ɵfac = function MultiselectDropdownComponent_Factory(t) { return new (t || MultiselectDropdownComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormBuilder), ɵngcc0.ɵɵdirectiveInject(MultiSelectSearchFilter), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
MultiselectDropdownComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MultiselectDropdownComponent, selectors: [["ss-multiselect-dropdown"]], inputs: { disabled: "disabled", disabledSelection: "disabledSelection", searchFunction: "searchFunction", settings: "settings", texts: "texts", options: "options" }, outputs: { selectionLimitReached: "selectionLimitReached", dropdownClosed: "dropdownClosed", dropdownOpened: "dropdownOpened", onAdded: "onAdded", onRemoved: "onRemoved", onLazyLoad: "onLazyLoad", onFilter: "onFilter" }, features: [ɵngcc0.ɵɵProvidersFeature([MULTISELECT_VALUE_ACCESSOR, MultiSelectSearchFilter]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 8, consts: [[1, "dropdown", 3, "ngClass", "offClick"], ["type", "button", 1, "dropdown-toggle", 3, "ngClass", "disabled", "ssAutofocus", "click"], [1, "caret"], ["class", "dropdown-menu", "style", "display: block; height: auto; overflow-y: auto;", 3, "ngClass", "pull-right", "dropdown-menu-right", "max-height", "scroll", "wheel", "keydown.tab", "keydown.shift.tab", 4, "ngIf"], [1, "dropdown-menu", 2, "display", "block", "height", "auto", "overflow-y", "auto", 3, "ngClass", "scroll", "wheel", "keydown.tab", "keydown.shift.tab"], ["scroller", ""], ["class", "input-group search-container", 4, "ngIf"], ["role", "menuitem", "href", "javascript:;", "tabindex", "-1", "class", "dropdown-item check-control check-control-check", 3, "click", 4, "ngIf"], ["role", "menuitem", "href", "javascript:;", "tabindex", "-1", "class", "dropdown-item check-control check-control-uncheck", 3, "click", 4, "ngIf"], ["href", "javascript:;", "class", "dropdown-divider divider", 4, "ngIf"], ["href", "javascript:;", "class", "dropdown-item empty", 4, "ngIf"], ["class", "dropdown-item", "href", "javascript:;", "tabindex", "-1", 3, "active", "ngStyle", "ngClass", "dropdown-header", "ssAutofocus", "click", "keydown.space", "keydown.enter", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "input-group", "search-container"], [1, "input-group-prepend"], ["id", "basic-addon1", 1, "input-group-text"], ["aria-hidden", "true", 1, "fa", "fa-search"], ["type", "text", "ssAutofocus", "", 1, "form-control", 3, "formControl", "placeholder"], ["class", "input-group-append", 4, "ngIf"], [1, "input-group-append"], ["type", "button", 1, "btn", "btn-default", "btn-secondary", 3, "click"], [1, "fa", "fa-times"], ["role", "menuitem", "href", "javascript:;", "tabindex", "-1", 1, "dropdown-item", "check-control", "check-control-check", 3, "click"], [2, "width", "16px"], [3, "ngClass"], ["role", "menuitem", "href", "javascript:;", "tabindex", "-1", 1, "dropdown-item", "check-control", "check-control-uncheck", 3, "click"], ["href", "javascript:;", 1, "dropdown-divider", "divider"], ["href", "javascript:;", 1, "dropdown-item", "empty"], ["href", "javascript:;", "tabindex", "-1", 1, "dropdown-item", 3, "ngStyle", "ngClass", "ssAutofocus", "click", "keydown.space", "keydown.enter"], ["role", "menuitem", "tabindex", "-1", 3, "padding-left", "ngStyle", 4, "ngIf", "ngIfElse"], ["label", ""], ["role", "menuitem", "tabindex", "-1", 3, "ngStyle"], [3, "ngSwitch"], ["type", "checkbox", 3, "checked", "disabled", "ngStyle", "click", 4, "ngSwitchCase"], ["style", "width: 16px;", "class", "glyphicon", 3, "glyphicon-ok", "glyphicon-lock", 4, "ngSwitchCase"], ["style", "width: 16px;display: inline-block;", 4, "ngSwitchCase"], ["style", "display:block;float:left; border-radius: 0.2em; border: 0.1em solid rgba(44, 44, 44, 0.63);background:rgba(0, 0, 0, 0.1);width: 5.5em;", 4, "ngSwitchCase"], ["type", "checkbox", 3, "checked", "disabled", "ngStyle", "click"], [1, "glyphicon", 2, "width", "16px"], [2, "width", "16px", "display", "inline-block"], [4, "ngIf"], ["aria-hidden", "true", 1, "fa", "fa-check"], ["aria-hidden", "true", 1, "fa", "fa-lock"], [2, "display", "block", "float", "left", "border-radius", "0.2em", "border", "0.1em solid rgba(44, 44, 44, 0.63)", "background", "rgba(0, 0, 0, 0.1)", "width", "5.5em"], [1, "slider", 3, "ngClass"], ["style", "height: 100%; width: 100%; object-fit: contain", 3, "src", 4, "ngIf"], ["style", "height: 100%; width: 100%;text-align: center; display: table; background-color:rgba(0, 0, 0, 0.74)", 4, "ngIf"], [2, "height", "100%", "width", "100%", "object-fit", "contain", 3, "src"], [2, "height", "100%", "width", "100%", "text-align", "center", "display", "table", "background-color", "rgba(0, 0, 0, 0.74)"], [1, "content_wrapper"], [1, "glyphicon", "glyphicon-eye-close", 2, "font-size", "3em", "color", "white"]], template: function MultiselectDropdownComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("offClick", function MultiselectDropdownComponent_Template_div_offClick_0_listener() { return ctx.clickedOutside(); });
        ɵngcc0.ɵɵelementStart(1, "button", 1);
        ɵngcc0.ɵɵlistener("click", function MultiselectDropdownComponent_Template_button_click_1_listener($event) { return ctx.toggleDropdown($event); });
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelement(3, "span", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, MultiselectDropdownComponent_div_4_Template, 9, 17, "div", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("open", ctx.isVisible);
        ɵngcc0.ɵɵproperty("ngClass", ctx.settings.containerClasses);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ctx.settings.buttonClasses)("disabled", ctx.disabled)("ssAutofocus", !ctx.focusBack);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.title, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isVisible);
    } }, directives: function () { return [ɵngcc2.NgClass, OffClickDirective, AutofocusDirective, ɵngcc2.NgIf, ɵngcc2.NgForOf, ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.FormControlDirective, ɵngcc2.NgStyle, ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase]; }, styles: ["a[_ngcontent-%COMP%]{outline:0!important}.dropdown-inline[_ngcontent-%COMP%]{display:inline-block}.dropdown-toggle[_ngcontent-%COMP%]   .caret[_ngcontent-%COMP%]{margin-left:4px;white-space:nowrap;display:inline-block}.chunkydropdown-menu[_ngcontent-%COMP%]{min-width:20em}.chunkyrow[_ngcontent-%COMP%]{line-height:2;margin-left:1em;font-size:2em}.slider[_ngcontent-%COMP%]{width:3.8em;height:3.8em;display:block;transition:all 125ms linear;margin-left:.125em;margin-top:auto}.slideron[_ngcontent-%COMP%]{margin-left:1.35em}.content_wrapper[_ngcontent-%COMP%]{display:table-cell;vertical-align:middle}.search-container[_ngcontent-%COMP%]{padding:0 5px 5px}"], changeDetection: 0 });
/** @nocollapse */
MultiselectDropdownComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: FormBuilder, },
    { type: MultiSelectSearchFilter, },
    { type: IterableDiffers, },
    { type: ChangeDetectorRef, },
];
MultiselectDropdownComponent.propDecorators = {
    "options": [{ type: Input },],
    "settings": [{ type: Input },],
    "texts": [{ type: Input },],
    "disabled": [{ type: Input },],
    "disabledSelection": [{ type: Input },],
    "searchFunction": [{ type: Input },],
    "selectionLimitReached": [{ type: Output },],
    "dropdownClosed": [{ type: Output },],
    "dropdownOpened": [{ type: Output },],
    "onAdded": [{ type: Output },],
    "onRemoved": [{ type: Output },],
    "onLazyLoad": [{ type: Output },],
    "onFilter": [{ type: Output },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MultiselectDropdownComponent, [{
        type: Component,
        args: [{
                selector: 'ss-multiselect-dropdown',
                template: "<div class=\"dropdown\" [ngClass]=\"settings.containerClasses\" [class.open]=\"isVisible\" (offClick)=\"clickedOutside()\">\n  <button type=\"button\" class=\"dropdown-toggle\" [ngClass]=\"settings.buttonClasses\" (click)=\"toggleDropdown($event)\" [disabled]=\"disabled\"\n    [ssAutofocus]=\"!focusBack\">\n    {{ title }}\n    <span class=\"caret\"></span>\n  </button>\n  <div #scroller *ngIf=\"isVisible\" class=\"dropdown-menu\" [ngClass]=\"{'chunkydropdown-menu': settings.checkedStyle == 'visual' }\"\n    (scroll)=\"settings.isLazyLoad ? checkScrollPosition($event) : null\" (wheel)=\"settings.stopScrollPropagation ? checkScrollPropagation($event, scroller) : null\"\n    [class.pull-right]=\"settings.pullRight\" [class.dropdown-menu-right]=\"settings.pullRight\" [style.max-height]=\"settings.maxHeight\"\n    style=\"display: block; height: auto; overflow-y: auto;\" (keydown.tab)=\"focusItem(1, $event)\" (keydown.shift.tab)=\"focusItem(-1, $event)\">\n    <div class=\"input-group search-container\" *ngIf=\"settings.enableSearch\">\n      <div class=\"input-group-prepend\">\n        <span class=\"input-group-text\" id=\"basic-addon1\">\n          <i class=\"fa fa-search\" aria-hidden=\"true\"></i>\n        </span>\n      </div>\n      <input type=\"text\" class=\"form-control\" ssAutofocus [formControl]=\"filterControl\" [placeholder]=\"texts.searchPlaceholder\"\n        class=\"form-control\">\n      <div class=\"input-group-append\" *ngIf=\"filterControl.value.length>0\">\n        <button class=\"btn btn-default btn-secondary\" type=\"button\" (click)=\"clearSearch($event)\">\n          <i class=\"fa fa-times\"></i>\n        </button>\n      </div>\n    </div>\n    <a role=\"menuitem\" href=\"javascript:;\" tabindex=\"-1\" class=\"dropdown-item check-control check-control-check\" *ngIf=\"settings.showCheckAll && !disabledSelection\"\n      (click)=\"checkAll()\">\n      <span style=\"width: 16px;\"><span [ngClass]=\"{'glyphicon glyphicon-ok': settings.checkedStyle !== 'fontawesome','fa fa-check': settings.checkedStyle === 'fontawesome'}\"></span></span>\n      {{ texts.checkAll }}\n    </a>\n    <a role=\"menuitem\" href=\"javascript:;\" tabindex=\"-1\" class=\"dropdown-item check-control check-control-uncheck\" *ngIf=\"settings.showUncheckAll && !disabledSelection\"\n      (click)=\"uncheckAll()\">\n      <span style=\"width: 16px;\"><span [ngClass]=\"{'glyphicon glyphicon-remove': settings.checkedStyle !== 'fontawesome','fa fa-times': settings.checkedStyle === 'fontawesome'}\"></span></span>\n      {{ texts.uncheckAll }}\n    </a>\n    <a *ngIf=\"settings.showCheckAll || settings.showUncheckAll\" href=\"javascript:;\" class=\"dropdown-divider divider\"></a>\n    <a *ngIf=\"!renderItems\" href=\"javascript:;\" class=\"dropdown-item empty\">{{ texts.searchNoRenderText }}</a>\n    <a *ngIf=\"renderItems && !renderFilteredOptions.length\" href=\"javascript:;\" class=\"dropdown-item empty\">{{ texts.searchEmptyResult }}</a>\n    <a class=\"dropdown-item\" href=\"javascript:;\" *ngFor=\"let option of renderFilteredOptions; trackBy: trackById\" [class.active]=\"isSelected(option)\"\n      [ngStyle]=\"getItemStyle(option)\" [ngClass]=\"option.classes\" [class.dropdown-header]=\"option.isLabel\" [ssAutofocus]=\"option !== focusedItem\"\n      tabindex=\"-1\" (click)=\"setSelected($event, option)\" (keydown.space)=\"setSelected($event, option)\" (keydown.enter)=\"setSelected($event, option)\">\n      <span *ngIf=\"!option.isLabel; else label\" role=\"menuitem\" tabindex=\"-1\" [style.padding-left]=\"this.parents.length>0&&this.parents.indexOf(option.id)<0&&'30px'\"\n        [ngStyle]=\"getItemStyleSelectionDisabled()\">\n        <ng-container [ngSwitch]=\"settings.checkedStyle\">\n          <input *ngSwitchCase=\"'checkboxes'\" type=\"checkbox\" [checked]=\"isSelected(option)\" (click)=\"preventCheckboxCheck($event, option)\"\n            [disabled]=\"isCheckboxDisabled(option)\" [ngStyle]=\"getItemStyleSelectionDisabled()\" />\n          <span *ngSwitchCase=\"'glyphicon'\" style=\"width: 16px;\" class=\"glyphicon\" [class.glyphicon-ok]=\"isSelected(option)\" [class.glyphicon-lock]=\"isCheckboxDisabled(option)\"></span>\n          <span *ngSwitchCase=\"'fontawesome'\" style=\"width: 16px;display: inline-block;\">\n            <span *ngIf=\"isSelected(option)\"><i class=\"fa fa-check\" aria-hidden=\"true\"></i></span>\n            <span *ngIf=\"isCheckboxDisabled(option)\"><i class=\"fa fa-lock\" aria-hidden=\"true\"></i></span>\n          </span>\n          <span *ngSwitchCase=\"'visual'\" style=\"display:block;float:left; border-radius: 0.2em; border: 0.1em solid rgba(44, 44, 44, 0.63);background:rgba(0, 0, 0, 0.1);width: 5.5em;\">\n            <div class=\"slider\" [ngClass]=\"{'slideron': isSelected(option)}\">\n              <img *ngIf=\"option.image != null\" [src]=\"option.image\" style=\"height: 100%; width: 100%; object-fit: contain\" />\n              <div *ngIf=\"option.image == null\" style=\"height: 100%; width: 100%;text-align: center; display: table; background-color:rgba(0, 0, 0, 0.74)\">\n                <div class=\"content_wrapper\">\n                  <span style=\"font-size:3em;color:white\" class=\"glyphicon glyphicon-eye-close\"></span>\n                </div>\n              </div>\n            </div>\n          </span>\n        </ng-container>\n        <span [ngClass]=\"{'chunkyrow': settings.checkedStyle == 'visual' }\" [class.disabled]=\"isCheckboxDisabled(option)\" [ngClass]=\"settings.itemClasses\"\n          [style.font-weight]=\"this.parents.indexOf(option.id)>=0?'bold':'normal'\">\n          {{ option.name }}\n        </span>\n      </span>\n      <ng-template #label>\n        <span [class.disabled]=\"isCheckboxDisabled(option)\">{{ option.name }}</span>\n      </ng-template>\n    </a>\n  </div>\n</div>\n",
                providers: [MULTISELECT_VALUE_ACCESSOR, MultiSelectSearchFilter],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["a{outline:0!important}.dropdown-inline{display:inline-block}.dropdown-toggle .caret{margin-left:4px;white-space:nowrap;display:inline-block}.chunkydropdown-menu{min-width:20em}.chunkyrow{line-height:2;margin-left:1em;font-size:2em}.slider{width:3.8em;height:3.8em;display:block;transition:all 125ms linear;margin-left:.125em;margin-top:auto}.slideron{margin-left:1.35em}.content_wrapper{display:table-cell;vertical-align:middle}.search-container{padding:0 5px 5px}"]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FormBuilder }, { type: MultiSelectSearchFilter }, { type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }]; }, { disabled: [{
            type: Input
        }], disabledSelection: [{
            type: Input
        }], searchFunction: [{
            type: Input
        }], selectionLimitReached: [{
            type: Output
        }], dropdownClosed: [{
            type: Output
        }], dropdownOpened: [{
            type: Output
        }], onAdded: [{
            type: Output
        }], onRemoved: [{
            type: Output
        }], onLazyLoad: [{
            type: Output
        }], onFilter: [{
            type: Output
        }], settings: [{
            type: Input
        }], texts: [{
            type: Input
        }], options: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class OffClickDirective {
    constructor() {
        this.onOffClick = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        this._clickEvent = event;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouch(event) {
        this._touchEvent = event;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDocumentClick(event) {
        if (event !== this._clickEvent) {
            this.onOffClick.emit(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDocumentTouch(event) {
        if (event !== this._touchEvent) {
            this.onOffClick.emit(event);
        }
    }
}
OffClickDirective.ɵfac = function OffClickDirective_Factory(t) { return new (t || OffClickDirective)(); };
OffClickDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: OffClickDirective, selectors: [["", "offClick", ""]], hostBindings: function OffClickDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function OffClickDirective_click_HostBindingHandler($event) { return ctx.onClick($event); })("touchstart", function OffClickDirective_touchstart_HostBindingHandler($event) { return ctx.onTouch($event); })("click", function OffClickDirective_click_HostBindingHandler($event) { return ctx.onDocumentClick($event); }, false, ɵngcc0.ɵɵresolveDocument)("touchstart", function OffClickDirective_touchstart_HostBindingHandler($event) { return ctx.onDocumentTouch($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } }, outputs: { onOffClick: "offClick" } });
/** @nocollapse */
OffClickDirective.propDecorators = {
    "onOffClick": [{ type: Output, args: ['offClick',] },],
    "onClick": [{ type: HostListener, args: ['click', ['$event'],] },],
    "onTouch": [{ type: HostListener, args: ['touchstart', ['$event'],] },],
    "onDocumentClick": [{ type: HostListener, args: ['document:click', ['$event'],] },],
    "onDocumentTouch": [{ type: HostListener, args: ['document:touchstart', ['$event'],] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OffClickDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[offClick]'
            }]
    }], function () { return []; }, { onOffClick: [{
            type: Output,
            args: ['offClick']
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], onTouch: [{
            type: HostListener,
            args: ['touchstart', ['$event']]
        }], onDocumentClick: [{
            type: HostListener,
            args: ['document:click', ['$event']]
        }], onDocumentTouch: [{
            type: HostListener,
            args: ['document:touchstart', ['$event']]
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MultiselectDropdownModule {
}
MultiselectDropdownModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MultiselectDropdownModule });
MultiselectDropdownModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MultiselectDropdownModule_Factory(t) { return new (t || MultiselectDropdownModule)(); }, imports: [[CommonModule, ReactiveFormsModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MultiselectDropdownModule, { declarations: function () { return [MultiselectDropdownComponent, MultiSelectSearchFilter, AutofocusDirective, OffClickDirective]; }, imports: function () { return [CommonModule, ReactiveFormsModule]; }, exports: function () { return [MultiselectDropdownComponent, MultiSelectSearchFilter]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MultiselectDropdownModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, ReactiveFormsModule],
                exports: [
                    MultiselectDropdownComponent,
                    MultiSelectSearchFilter,
                ],
                declarations: [
                    MultiselectDropdownComponent,
                    MultiSelectSearchFilter,
                    AutofocusDirective,
                    OffClickDirective
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MultiSelectSearchFilter, MultiselectDropdownModule, MultiselectDropdownComponent, AutofocusDirective as ɵa, OffClickDirective as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,