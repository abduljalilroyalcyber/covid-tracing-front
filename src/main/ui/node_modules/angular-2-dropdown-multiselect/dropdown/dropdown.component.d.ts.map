{"version":3,"file":"dropdown.component.d.ts","sources":["dropdown.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, IterableDiffers, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, FormBuilder, FormControl, Validator } from '@angular/forms';\nimport { Observable, Subject } from 'rxjs';\nimport { MultiSelectSearchFilter } from './search-filter.pipe';\nimport { IMultiSelectOption, IMultiSelectSettings, IMultiSelectTexts } from './types';\nexport declare class MultiselectDropdownComponent implements OnInit, OnChanges, DoCheck, OnDestroy, ControlValueAccessor, Validator {\n    private element;\n    private fb;\n    private searchFilter;\n    private cdRef;\n    filterControl: FormControl;\n    options: Array<IMultiSelectOption>;\n    settings: IMultiSelectSettings;\n    texts: IMultiSelectTexts;\n    disabled: boolean;\n    disabledSelection: boolean;\n    searchFunction: (str: string) => RegExp;\n    selectionLimitReached: EventEmitter<{}>;\n    dropdownClosed: EventEmitter<{}>;\n    dropdownOpened: EventEmitter<{}>;\n    onAdded: EventEmitter<{}>;\n    onRemoved: EventEmitter<{}>;\n    onLazyLoad: EventEmitter<{}>;\n    onFilter: Observable<string>;\n    readonly focusBack: boolean;\n    clickedOutside(): void;\n    destroyed$: Subject<any>;\n    filteredOptions: IMultiSelectOption[];\n    lazyLoadOptions: IMultiSelectOption[];\n    renderFilteredOptions: IMultiSelectOption[];\n    model: any[];\n    prevModel: any[];\n    parents: any[];\n    title: string;\n    differ: any;\n    numSelected: number;\n    isVisible: boolean;\n    renderItems: boolean;\n    checkAllSearchRegister: Set<any>;\n    checkAllStatus: boolean;\n    loadedValueIds: any[];\n    _focusBack: boolean;\n    focusedItem: IMultiSelectOption | undefined;\n    defaultSettings: IMultiSelectSettings;\n    defaultTexts: IMultiSelectTexts;\n    readonly searchLimit: number;\n    readonly searchRenderAfter: number;\n    readonly searchLimitApplied: boolean;\n    private _isVisible;\n    private _workerDocClicked;\n    constructor(element: ElementRef, fb: FormBuilder, searchFilter: MultiSelectSearchFilter, differs: IterableDiffers, cdRef: ChangeDetectorRef);\n    getItemStyle(option: IMultiSelectOption): any;\n    getItemStyleSelectionDisabled(): any;\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    updateRenderItems(): void;\n    applyFilters(options: any, value: any): IMultiSelectOption[];\n    fireModelChange(): void;\n    onModelChange: Function;\n    onModelTouched: Function;\n    writeValue(value: any): void;\n    registerOnChange(fn: Function): void;\n    registerOnTouched(fn: Function): void;\n    setDisabledState(isDisabled: boolean): void;\n    ngDoCheck(): void;\n    validate(_c: AbstractControl): {\n        [key: string]: any;\n    };\n    registerOnValidatorChange(_fn: () => void): void;\n    clearSearch(event: Event): void;\n    toggleDropdown(e?: Event): void;\n    closeDropdown(e?: Event): void;\n    isSelected(option: IMultiSelectOption): boolean;\n    setSelected(_event: Event, option: IMultiSelectOption): void;\n    updateNumSelected(): void;\n    updateTitle(): void;\n    searchFilterApplied(): boolean;\n    addChecks(options: any): void;\n    checkAll(): void;\n    uncheckAll(): void;\n    preventCheckboxCheck(event: Event, option: IMultiSelectOption): void;\n    isCheckboxDisabled(option?: IMultiSelectOption): boolean;\n    checkScrollPosition(ev: any): void;\n    checkScrollPropagation(ev: any, element: any): void;\n    trackById(idx: number, selectOption: IMultiSelectOption): any;\n    load(): void;\n    focusItem(dir: number, e?: Event): void;\n    private maybePreventDefault(e?);\n    private maybeStopPropagation(e?);\n    private _escapeRegExp(str);\n}\n"]}